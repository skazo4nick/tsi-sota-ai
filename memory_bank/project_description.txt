### 1. Project Overview
- **Objective:**  
  The project is designed to create a Knowledge Retrieval Agentic System that leverages Large Language Models (LLMs) and AI-powered agent networks. The system integrates multiple storage solutions and knowledge representation techniques to provide comprehensive information retrieval and research capabilities.
  
- **Core Functionalities:**  
  • Multi-source content retrieval through API integrations  
  • Semantic search using vector storage  
  • Knowledge graph construction for relationship discovery  
  • Context-aware retrieval with hierarchical context management  
  • Agent-based workflows for orchestrated research and analysis  
  • Interactive dashboard for system insights and data exploration

- **Project Management:**  
  • Sprint-based development with bi-weekly iterations  
  • Comprehensive backlog tracking in `memory_bank/project_management/backlog.md`  
  • Publication selection mechanism with quality assessment criteria  
  • Regular progress tracking and documentation updates

---

### 2. Architecture and Directory Structure
- **High-Level Structure:**  
  - **app/**: Contains main application scripts and modules for data processing and retrieval.  
  - **data/**: Storage for raw and processed data such as PDFs, CSV files, JSON outputs, and embeddings.  
  - **memory_bank/**: Repository for long-term project context and documentation.  
  - **notebooks/**: Interactive Jupyter Notebooks for exploration and analysis.  
  - **springernature_api_client/**: Implementation for SpringerNature API.  
  - **dashboard/**: Visual interface for system insights and data exploration.
  - **project_management/**: Contains backlog, sprint planning, and progress tracking.
  
- **Purpose:**  
  This layout separates core functionalities into distinct areas to enhance maintainability, scalability, and ease of navigation.

---

### 3. Module Details
- **Key Modules in app/:**  
  - **api/**: Base API client and implementations for different content sources.  
  - **storage/**: Integration with Backblaze B2, Qdrant, and Meilisearch.  
  - **knowledge_graph/**: Neo4j integration for entity and relationship management.  
  - **context/**: Hierarchical context management system.  
  - **orchestration/**: Agent-based workflow orchestration using smolagents.  
  - **retrieval/**: Semantic search and context-aware retrieval.

- **Why:**  
  Isolating responsibilities into dedicated modules simplifies debugging, testing, and potential reuse of code across different parts of the project.

---

### 4. Data Management
- **Data Ingestion and Storage:**  
  - Raw content is stored in Backblaze B2.  
  - Vector embeddings are stored in Qdrant.  
  - Processed markdown content is stored in Meilisearch.  
  - Knowledge graph data is stored in Neo4j.
  
- **Data Flow:**  
  Data is retrieved from APIs, processed, and then stored in appropriate storage solutions; the knowledge graph enriches the data with relationships and context.

---

### 5. Environment and Dependencies
- **Configuration Files:**  
  - `requirements.txt` lists Python dependencies.  
  - Environment configuration ensures reproducibility.
  
- **Setup Instructions:**  
  New users should install dependencies via pip using the provided configuration files to ensure consistency across environments.

---

### 6. Workflow and Usage
- **Developer Workflow:**  
  1. **Retrieval Phase:** Use the API clients to fetch content from various sources.  
  2. **Processing Phase:** Process and extract valuable information via specialized modules.  
  3. **Storage Phase:** Store data in appropriate storage solutions.  
  4. **Analysis Phase:** Leverage Jupyter Notebooks in the `notebooks/` folder to explore and analyze the data.
  
- **User Guides:**  
  Documentation in the memory bank and README files provide step-by-step instructions for executing each phase.

---

### 7. Future Enhancements / Known Limitations
- **Future Enhancements:**  
  - Additional API integrations  
  - Advanced knowledge graph queries  
  - Enhanced context management  
  - Workflow optimization  
  - Performance tuning
  
- **Known Limitations:**  
  Current modules may require manual adjustments for different data formats; scalability improvements might be necessary for larger datasets.

---

### Current Project Status
Updated on: 2024-04-20
- Project has shifted focus from Decision Support System to Knowledge Retrieval Agentic System.
- Core architecture has been defined with multiple storage solutions and knowledge representation techniques.
- API integration layer is being developed with implementations for SpringerNature and CORE.
- Storage layer integrations with Backblaze B2, Qdrant, and Meilisearch are planned.
- Knowledge Graph using Neo4j is being designed for entity and relationship management.
- Agent-based workflow orchestration using smolagents is being prototyped.
