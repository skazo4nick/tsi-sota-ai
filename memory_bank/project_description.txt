Project: TSI Supply Chain Management AI-powered Decision Support Systems SoTA

Overview:
This project aims to design, build, evaluate, and iteratively improve an AI-powered decision support system for Supply Chain Management (SCM). The system will leverage Large Language Models (LLMs) and potentially AI agent networks to enhance decision-making processes in SCM.

System Goal:
To create a practical and valuable tool for SCM professionals and researchers by developing an AI-driven system that extracts knowledge from academic literature and provides intelligent decision support.

Key System Functionalities to Develop:
1. Literature Review System:  Ingest, process, and store academic publications related to LLMs in SCM.
2. Keyword Analysis Module: Extract and analyze key terms from publications using DOI lookup APIs to understand research themes.
3. Publication Clustering Component: Cluster publications based on abstract embeddings to identify research clusters and topics. Implement visualization for cluster representation.
4. RAG-Based Streamlit Application: Develop an interactive web application using Streamlit. This app will allow users to query the literature database and receive context-aware responses generated by LLMs using a Retrieval-Augmented Generation (RAG) approach.
5. Bibliometric Analysis Tools: Implement statistical analysis of publication data to identify trends, citation patterns, and co-authorship networks within the SCM and LLM literature.

Project Structure:
The repository is organized as follows:
- data/:  For storing datasets used in the project, including literature data.
- src/: Contains Python source code for all system components (data processing, analysis, application logic).
- notebooks/: Jupyter notebooks for exploratory data analysis, prototyping, and experimentation.
- app/:  Directory for the Streamlit application code.
- requirements.txt: Lists Python package dependencies.

Development Focus:
The primary focus is on building a functional, modular, and scalable AI system.  Prioritize clean code, well-defined modules, robust data handling, and a user-friendly Streamlit interface.  The system should be designed for iterative development and evaluation.

Initial Development Phases:
Phase 1: Core components - Literature Review data handling, Keyword Analysis, Publication Clustering, basic Streamlit app prototype.
Phase 2: Bibliometric Analysis, Streamlit app enhancements (advanced querying, visualization), exploration of agent network integration.
Phase 3: System evaluation, optimization, documentation, UI/UX refinement, deployment considerations.

Technology Stack:
Python is the primary language. Key libraries include: pandas, scikit-learn, scipy (data analysis); NLTK, spaCy, transformers (NLP); Streamlit (UI).  Consider vector databases and LLM APIs for enhanced functionality as needed.